
// Solution Class

public class Solution {

	public static void intersection(int[] arr1, int[] arr2) {
		
			sort(arr1,arr1.length);
		
			sort(arr2,arr2.length);
        
     
		mergeSort(arr1,arr2);
	 
        
	}
	
	public static void sort(int[]arr,int n) {
		
		if(n<=1)
			return;
		
		sort(arr,n-1);
		 int last = arr[n-1];
		 int j = n-2;
		 
		 while(j>=0 && arr[j]>last) {
			 arr[j+1]=arr[j];
			 j--;
		 }
		 arr[j+1] =last;
	}
	
	public static void mergeSort(int a[],int b[]) {
		 int i=0;
		 int j=0;
		 

		 while(i<a.length && j<b.length) {
			 if(a[i]< b[j]) {
				 i++;
			 }
			else if(a[i]>b[j]){
                j++;
            }
			 else {
				 System.out.print(a[i]+" ");
				 i++;
				 j++;
			 }
		 }
		
	}

}


// Main Class

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ArrayIntersection {

    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    
    public static int[] takeInput() throws IOException {
        int size = Integer.parseInt(br.readLine().trim());
        int[] input = new int[size];

        if (size == 0) {
            return input;
        }
        
        String[] strNums; 
        strNums = br.readLine().split("\\s");
        

        for (int i = 0; i < size; ++i) {
            input[i] = Integer.parseInt(strNums[i]);
        }

        return input;
    }

    public static void printArray(int[] arr) {
        for (int element : arr) {
            System.out.print(element + " ");
        }

        System.out.println();
    }

    public static void main(String[] args) throws NumberFormatException, IOException {
        int t = Integer.parseInt(br.readLine().trim());

        while(t > 0) {
            int[] arr1 = takeInput();
            int[] arr2 = takeInput();
            Solution.intersection(arr1, arr2);
            System.out.println();

            t -= 1;
        }
    }
}



